"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const auto_shutdown_1 = require("../../lib/lambdas/auto-shutdown");
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const client_ec2_1 = require("@aws-sdk/client-ec2");
const client_eventbridge_1 = require("@aws-sdk/client-eventbridge");
const ec2Mock = (0, aws_sdk_client_mock_1.mockClient)(client_ec2_1.EC2Client);
const eventBridgeMock = (0, aws_sdk_client_mock_1.mockClient)(client_eventbridge_1.EventBridgeClient);
describe('Auto-Shutdown Lambda', () => {
    beforeEach(() => {
        ec2Mock.reset();
        eventBridgeMock.reset();
        process.env.VALHEIM_INSTANCE_ID = 'i-1234567890abcdef0';
        process.env.MIN_UPTIME_MINUTES = '10';
    });
    afterEach(() => {
        delete process.env.VALHEIM_INSTANCE_ID;
        delete process.env.MIN_UPTIME_MINUTES;
    });
    const mockSNSEvent = {
        Records: [{
                EventSource: 'aws:sns',
                EventVersion: '1.0',
                EventSubscriptionArn: 'arn:aws:sns:us-east-1:123456789012:test-topic:12345678-1234-1234-1234-123456789012',
                Sns: {
                    Type: 'Notification',
                    MessageId: '12345678-1234-1234-1234-123456789012',
                    TopicArn: 'arn:aws:sns:us-east-1:123456789012:test-topic',
                    Subject: 'ALARM: PlayerInactivityAlarm',
                    Message: JSON.stringify({
                        AlarmName: 'PlayerInactivityAlarm',
                        NewStateValue: 'ALARM',
                        Trigger: {
                            MetricName: 'PlayerCount',
                            Namespace: 'ValheimServer',
                            Statistic: 'Maximum',
                            Unit: null,
                            Dimensions: [],
                            Period: 300,
                            EvaluationPeriods: 2,
                            ComparisonOperator: 'LessThanOrEqualToThreshold',
                            Threshold: 0.0
                        }
                    }),
                    Timestamp: new Date().toISOString(),
                    SignatureVersion: '1',
                    Signature: 'test-signature',
                    SigningCertUrl: 'https://sns.us-east-1.amazonaws.com/SimpleNotificationService-test.pem',
                    UnsubscribeUrl: 'https://sns.us-east-1.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=test',
                    MessageAttributes: {}
                }
            }]
    };
    const mockContext = {
        callbackWaitsForEmptyEventLoop: false,
        functionName: 'auto-shutdown-test',
        functionVersion: '1',
        invokedFunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:auto-shutdown-test',
        memoryLimitInMB: '128',
        awsRequestId: '12345678-1234-1234-1234-123456789012',
        logGroupName: '/aws/lambda/auto-shutdown-test',
        logStreamName: '2024/01/01/[$LATEST]abcdef1234567890',
        getRemainingTimeInMillis: () => 30000,
        done: () => { },
        fail: () => { },
        succeed: () => { }
    };
    it('should stop instance when it meets uptime requirements', async () => {
        const launchTime = new Date(Date.now() - 15 * 60 * 1000); // 15 minutes ago
        ec2Mock.on(client_ec2_1.DescribeInstancesCommand).resolves({
            Reservations: [{
                    Instances: [{
                            InstanceId: 'i-1234567890abcdef0',
                            State: { Name: 'running' },
                            LaunchTime: launchTime
                        }]
                }]
        });
        ec2Mock.on(client_ec2_1.StopInstancesCommand).resolves({});
        eventBridgeMock.on(client_eventbridge_1.PutEventsCommand).resolves({});
        await (0, auto_shutdown_1.handler)(mockSNSEvent, mockContext);
        expect(ec2Mock.commandCalls(client_ec2_1.DescribeInstancesCommand)).toHaveLength(1);
        expect(ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)).toHaveLength(1);
        expect(eventBridgeMock.commandCalls(client_eventbridge_1.PutEventsCommand)).toHaveLength(1);
        const stopCall = ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)[0];
        expect(stopCall.args[0].input.InstanceIds).toEqual(['i-1234567890abcdef0']);
    });
    it('should not stop instance if uptime is less than minimum', async () => {
        const launchTime = new Date(Date.now() - 5 * 60 * 1000); // 5 minutes ago
        ec2Mock.on(client_ec2_1.DescribeInstancesCommand).resolves({
            Reservations: [{
                    Instances: [{
                            InstanceId: 'i-1234567890abcdef0',
                            State: { Name: 'running' },
                            LaunchTime: launchTime
                        }]
                }]
        });
        await (0, auto_shutdown_1.handler)(mockSNSEvent, mockContext);
        expect(ec2Mock.commandCalls(client_ec2_1.DescribeInstancesCommand)).toHaveLength(1);
        expect(ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)).toHaveLength(0);
        expect(eventBridgeMock.commandCalls(client_eventbridge_1.PutEventsCommand)).toHaveLength(0);
    });
    it('should not stop instance if it is not running', async () => {
        ec2Mock.on(client_ec2_1.DescribeInstancesCommand).resolves({
            Reservations: [{
                    Instances: [{
                            InstanceId: 'i-1234567890abcdef0',
                            State: { Name: 'stopped' },
                            LaunchTime: new Date(Date.now() - 15 * 60 * 1000)
                        }]
                }]
        });
        await (0, auto_shutdown_1.handler)(mockSNSEvent, mockContext);
        expect(ec2Mock.commandCalls(client_ec2_1.DescribeInstancesCommand)).toHaveLength(1);
        expect(ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)).toHaveLength(0);
        expect(eventBridgeMock.commandCalls(client_eventbridge_1.PutEventsCommand)).toHaveLength(0);
    });
    it('should handle missing instance gracefully', async () => {
        ec2Mock.on(client_ec2_1.DescribeInstancesCommand).resolves({
            Reservations: []
        });
        await (0, auto_shutdown_1.handler)(mockSNSEvent, mockContext);
        expect(ec2Mock.commandCalls(client_ec2_1.DescribeInstancesCommand)).toHaveLength(1);
        expect(ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)).toHaveLength(0);
        expect(eventBridgeMock.commandCalls(client_eventbridge_1.PutEventsCommand)).toHaveLength(0);
    });
    it('should handle missing environment variable', async () => {
        delete process.env.VALHEIM_INSTANCE_ID;
        await (0, auto_shutdown_1.handler)(mockSNSEvent, mockContext);
        expect(ec2Mock.commandCalls(client_ec2_1.DescribeInstancesCommand)).toHaveLength(0);
        expect(ec2Mock.commandCalls(client_ec2_1.StopInstancesCommand)).toHaveLength(0);
        expect(eventBridgeMock.commandCalls(client_eventbridge_1.PutEventsCommand)).toHaveLength(0);
    });
});
//# sourceMappingURL=data:application/json;base64,