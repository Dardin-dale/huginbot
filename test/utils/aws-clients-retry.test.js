"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_clients_1 = require("../../lib/lambdas/utils/aws-clients");
describe('AWS Client Retry Logic Tests', () => {
    // Save and restore console.log/error
    const originalConsoleLog = console.log;
    const originalConsoleError = console.error;
    beforeEach(() => {
        console.log = jest.fn();
        console.error = jest.fn();
    });
    afterEach(() => {
        console.log = originalConsoleLog;
        console.error = originalConsoleError;
    });
    it('should execute the operation successfully on first try', async () => {
        const mockOperation = jest.fn().mockResolvedValue('success');
        const result = await (0, aws_clients_1.withRetry)(mockOperation);
        expect(result).toBe('success');
        expect(mockOperation).toHaveBeenCalledTimes(1);
    });
    it('should retry the operation when it fails and succeed eventually', async () => {
        // Fail twice, succeed on third try
        const mockOperation = jest.fn()
            .mockRejectedValueOnce(new Error('Failure 1'))
            .mockRejectedValueOnce(new Error('Failure 2'))
            .mockResolvedValueOnce('success');
        // Mock setTimeout to execute immediately for faster tests
        jest.useFakeTimers();
        const originalSetTimeout = global.setTimeout;
        global.setTimeout = jest.fn((callback) => {
            callback();
            return {};
        });
        const result = await (0, aws_clients_1.withRetry)(mockOperation);
        expect(result).toBe('success');
        expect(mockOperation).toHaveBeenCalledTimes(3);
        // Restore setTimeout
        global.setTimeout = originalSetTimeout;
        jest.useRealTimers();
    });
    it('should throw an error after max retries', async () => {
        // Always fail
        const mockError = new Error('Persistent failure');
        const mockOperation = jest.fn().mockRejectedValue(mockError);
        // Mock setTimeout to execute immediately
        jest.useFakeTimers();
        const originalSetTimeout = global.setTimeout;
        global.setTimeout = jest.fn((callback) => {
            callback();
            return {};
        });
        await expect((0, aws_clients_1.withRetry)(mockOperation, 3)).rejects.toThrow(mockError);
        expect(mockOperation).toHaveBeenCalledTimes(3);
        // Restore setTimeout
        global.setTimeout = originalSetTimeout;
        jest.useRealTimers();
    });
    it('should respect custom maxRetries parameter', async () => {
        // Always fail
        const mockOperation = jest.fn().mockRejectedValue(new Error('Failure'));
        // Mock setTimeout to execute immediately
        jest.useFakeTimers();
        const originalSetTimeout = global.setTimeout;
        global.setTimeout = jest.fn((callback) => {
            callback();
            return {};
        });
        try {
            await (0, aws_clients_1.withRetry)(mockOperation, 5);
        }
        catch (error) {
            // Expected to fail
        }
        expect(mockOperation).toHaveBeenCalledTimes(5);
        // Restore setTimeout
        global.setTimeout = originalSetTimeout;
        jest.useRealTimers();
    });
    it('should use exponential backoff for delays between retries', async () => {
        const mockOperation = jest.fn()
            .mockRejectedValueOnce(new Error('Failure 1'))
            .mockRejectedValueOnce(new Error('Failure 2'))
            .mockResolvedValueOnce('success');
        const delays = [];
        const mockSetTimeout = jest.fn((callback, delay) => {
            delays.push(delay);
            callback();
            return {};
        });
        // Mock setTimeout to capture delay values
        jest.useFakeTimers();
        const originalSetTimeout = global.setTimeout;
        global.setTimeout = mockSetTimeout;
        await (0, aws_clients_1.withRetry)(mockOperation, 3, 100);
        expect(delays.length).toBe(2); // Two retries
        expect(delays[0]).toBe(100); // First retry: baseDelay * 2^0
        expect(delays[1]).toBe(200); // Second retry: baseDelay * 2^1
        // Restore setTimeout
        global.setTimeout = originalSetTimeout;
        jest.useRealTimers();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWNsaWVudHMtcmV0cnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3cy1jbGllbnRzLXJldHJ5LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxRUFBZ0U7QUFFaEUsUUFBUSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUM1QyxxQ0FBcUM7SUFDckMsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUUzQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEIsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztRQUNqQyxPQUFPLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU3RCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsdUJBQVMsRUFBQyxhQUFhLENBQUMsQ0FBQztRQUU5QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMv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K0JBQStCO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRyxnQ0FBZ0M7UUFFL0QscUJBQXFCO1FBQ3JCLE1BQU0sQ0FBQyxVQUFVLEdBQUcsa0JBQWtCLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoUmV0cnkgfSBmcm9tICcuLi8uLi9saWIvbGFtYmRhcy91dGlscy9hd3MtY2xpZW50cyc7XG5cbmRlc2NyaWJlKCdBV1MgQ2xpZW50IFJldHJ5IExvZ2ljIFRlc3RzJywgKCkgPT4ge1xuICAvLyBTYXZlIGFuZCByZXN0b3JlIGNvbnNvbGUubG9nL2Vycm9yXG4gIGNvbnN0IG9yaWdpbmFsQ29uc29sZUxvZyA9IGNvbnNvbGUubG9nO1xuICBjb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gIFxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyA9IGplc3QuZm4oKTtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuICB9KTtcbiAgXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2cgPSBvcmlnaW5hbENvbnNvbGVMb2c7XG4gICAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsQ29uc29sZUVycm9yO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbiBzdWNjZXNzZnVsbHkgb24gZmlyc3QgdHJ5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPcGVyYXRpb24gPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ3N1Y2Nlc3MnKTtcbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aXRoUmV0cnkobW9ja09wZXJhdGlvbik7XG4gICAgXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnc3VjY2VzcycpO1xuICAgIGV4cGVjdChtb2NrT3BlcmF0aW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0cnkgdGhlIG9wZXJhdGlvbiB3aGVuIGl0IGZhaWxzIGFuZCBzdWNjZWVkIGV2ZW50dWFsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gRmFpbCB0d2ljZSwgc3VjY2VlZCBvbiB0aGlyZCB0cnlcbiAgICBjb25zdCBtb2NrT3BlcmF0aW9uID0gamVzdC5mbigpXG4gICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignRmFpbHVyZSAxJykpXG4gICAgICAubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignRmFpbHVyZSAyJykpXG4gICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKCdzdWNjZXNzJyk7XG4gICAgXG4gICAgLy8gTW9jayBzZXRUaW1lb3V0IHRvIGV4ZWN1dGUgaW1tZWRpYXRlbHkgZm9yIGZhc3RlciB0ZXN0c1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgIGNvbnN0IG9yaWdpbmFsU2V0VGltZW91dCA9IGdsb2JhbC5zZXRUaW1lb3V0O1xuICAgIGdsb2JhbC5zZXRUaW1lb3V0ID0gamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4ge30gYXMgYW55O1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdpdGhSZXRyeShtb2NrT3BlcmF0aW9uKTtcbiAgICBcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKCdzdWNjZXNzJyk7XG4gICAgZXhwZWN0KG1vY2tPcGVyYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKTtcbiAgICBcbiAgICAvLyBSZXN0b3JlIHNldFRpbWVvdXRcbiAgICBnbG9iYWwuc2V0VGltZW91dCA9IG9yaWdpbmFsU2V0VGltZW91dDtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBhZnRlciBtYXggcmV0cmllcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBBbHdheXMgZmFpbFxuICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignUGVyc2lzdGVudCBmYWlsdXJlJyk7XG4gICAgY29uc3QgbW9ja09wZXJhdGlvbiA9IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShtb2NrRXJyb3IpO1xuICAgIFxuICAgIC8vIE1vY2sgc2V0VGltZW91dCB0byBleGVjdXRlIGltbWVkaWF0ZWx5XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgY29uc3Qgb3JpZ2luYWxTZXRUaW1lb3V0ID0gZ2xvYmFsLnNldFRpbWVvdXQ7XG4gICAgZ2xvYmFsLnNldFRpbWVvdXQgPSBqZXN0LmZuKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB7fSBhcyBhbnk7XG4gICAgfSk7XG4gICAgXG4gICAgYXdhaXQgZXhwZWN0KHdpdGhSZXRyeShtb2NrT3BlcmF0aW9uLCAzKSkucmVqZWN0cy50b1Rocm93KG1vY2tFcnJvcik7XG4gICAgZXhwZWN0KG1vY2tPcGVyYXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKTtcbiAgICBcbiAgICAvLyBSZXN0b3JlIHNldFRpbWVvdXRcbiAgICBnbG9iYWwuc2V0VGltZW91dCA9IG9yaWdpbmFsU2V0VGltZW91dDtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNwZWN0IGN1c3RvbSBtYXhSZXRyaWVzIHBhcmFtZXRlcicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBBbHdheXMgZmFpbFxuICAgIGNvbnN0IG1vY2tPcGVyYXRpb24gPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGYWlsdXJlJykpO1xuICAgIFxuICAgIC8vIE1vY2sgc2V0VGltZW91dCB0byBleGVjdXRlIGltbWVkaWF0ZWx5XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgY29uc3Qgb3JpZ2luYWxTZXRUaW1lb3V0ID0gZ2xvYmFsLnNldFRpbWVvdXQ7XG4gICAgZ2xvYmFsLnNldFRpbWVvdXQgPSBqZXN0LmZuKChjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiB7fSBhcyBhbnk7XG4gICAgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdpdGhSZXRyeShtb2NrT3BlcmF0aW9uLCA1KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRXhwZWN0ZWQgdG8gZmFpbFxuICAgIH1cbiAgICBcbiAgICBleHBlY3QobW9ja09wZXJhdGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDUpO1xuICAgIFxuICAgIC8vIFJlc3RvcmUgc2V0VGltZW91dFxuICAgIGdsb2JhbC5zZXRUaW1lb3V0ID0gb3JpZ2luYWxTZXRUaW1lb3V0O1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVzZSBleHBvbmVudGlhbCBiYWNrb2ZmIGZvciBkZWxheXMgYmV0d2VlbiByZXRyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPcGVyYXRpb24gPSBqZXN0LmZuKClcbiAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdGYWlsdXJlIDEnKSlcbiAgICAgIC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdGYWlsdXJlIDInKSlcbiAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoJ3N1Y2Nlc3MnKTtcbiAgICBcbiAgICBjb25zdCBkZWxheXM6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgbW9ja1NldFRpbWVvdXQgPSBqZXN0LmZuKChjYWxsYmFjaywgZGVsYXkpID0+IHtcbiAgICAgIGRlbGF5cy5wdXNoKGRlbGF5IGFzIG51bWJlcik7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIHt9IGFzIGFueTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBNb2NrIHNldFRpbWVvdXQgdG8gY2FwdHVyZSBkZWxheSB2YWx1ZXNcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICBjb25zdCBvcmlnaW5hbFNldFRpbWVvdXQgPSBnbG9iYWwuc2V0VGltZW91dDtcbiAgICBnbG9iYWwuc2V0VGltZW91dCA9IG1vY2tTZXRUaW1lb3V0O1xuICAgIFxuICAgIGF3YWl0IHdpdGhSZXRyeShtb2NrT3BlcmF0aW9uLCAzLCAxMDApO1xuICAgIFxuICAgIGV4cGVjdChkZWxheXMubGVuZ3RoKS50b0JlKDIpOyAvLyBUd28gcmV0cmllc1xuICAgIGV4cGVjdChkZWxheXNbMF0pLnRvQmUoMTAwKTsgICAvLyBGaXJzdCByZXRyeTogYmFzZURlbGF5ICogMl4wXG4gICAgZXhwZWN0KGRlbGF5c1sxXSkudG9CZSgyMDApOyAgIC8vIFNlY29uZCByZXRyeTogYmFzZURlbGF5ICogMl4xXG4gICAgXG4gICAgLy8gUmVzdG9yZSBzZXRUaW1lb3V0XG4gICAgZ2xvYmFsLnNldFRpbWVvdXQgPSBvcmlnaW5hbFNldFRpbWVvdXQ7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xufSk7Il19