"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const responses_1 = require("../../lib/lambdas/utils/responses");
describe('Response Utilities', () => {
    describe('createApiResponse', () => {
        test('creates response with correct status code and body', () => {
            const response = (0, responses_1.createApiResponse)(201, { message: 'Created' });
            expect(response.statusCode).toBe(201);
            expect(JSON.parse(response.body)).toEqual({ message: 'Created' });
        });
    });
    describe('createSuccessResponse', () => {
        test('creates 200 response with correct body', () => {
            const response = (0, responses_1.createSuccessResponse)({ message: 'Success', data: [1, 2, 3] });
            expect(response.statusCode).toBe(200);
            expect(JSON.parse(response.body)).toEqual({ message: 'Success', data: [1, 2, 3] });
        });
    });
    describe('createBadRequestResponse', () => {
        test('creates 400 response with correct message', () => {
            const response = (0, responses_1.createBadRequestResponse)('Bad request');
            expect(response.statusCode).toBe(400);
            expect(JSON.parse(response.body)).toEqual({ message: 'Bad request' });
        });
        test('includes additional data when provided', () => {
            const response = (0, responses_1.createBadRequestResponse)('Bad request', { details: 'Missing field' });
            expect(response.statusCode).toBe(400);
            expect(JSON.parse(response.body)).toEqual({
                message: 'Bad request',
                details: 'Missing field'
            });
        });
    });
    describe('createErrorResponse', () => {
        test('creates 500 response with default message when none provided', () => {
            const response = (0, responses_1.createErrorResponse)();
            expect(response.statusCode).toBe(500);
            expect(JSON.parse(response.body)).toEqual({ message: 'Internal server error' });
        });
        test('creates 500 response with custom message when provided', () => {
            const response = (0, responses_1.createErrorResponse)('Database connection failed');
            expect(response.statusCode).toBe(500);
            expect(JSON.parse(response.body)).toEqual({ message: 'Database connection failed' });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2VzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNwb25zZXMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlFQUsyQztBQUUzQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsSUFBSSxDQUFDLG9EQUFvRCxFQUFFLEdBQUcsRUFBRTtZQUM5RCxNQUFNLFFBQVEsR0FBRyxJQUFBLDZCQUFpQixFQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7WUFDbEQsTUFBTSxRQUFRLEdBQUcsSUFBQSxpQ0FBcUIsRUFBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUN4QyxJQUFJLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO1lBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUEsb0NBQXdCLEVBQUMsYUFBYSxDQUFDLENBQUM7WUFDekQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sUUFBUSxHQUFHLElBQUEsb0NBQXdCLEVBQUMsYUFBYSxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDdkYsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUN4QyxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsT0FBTyxFQUFFLGVBQWU7YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsSUFBSSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtZQUN4RSxNQUFNLFFBQVEsR0FBRyxJQUFBLCtCQUFtQixHQUFFLENBQUM7WUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFHLEVBQUU7WUFDbEUsTUFBTSxRQUFRLEdBQUcsSUFBQSwrQkFBbUIsRUFBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxDQUFDLENBQUM7UUFDdkYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgXG4gIGNyZWF0ZUFwaVJlc3BvbnNlLCBcbiAgY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlLCBcbiAgY3JlYXRlQmFkUmVxdWVzdFJlc3BvbnNlLCBcbiAgY3JlYXRlRXJyb3JSZXNwb25zZSBcbn0gZnJvbSAnLi4vLi4vbGliL2xhbWJkYXMvdXRpbHMvcmVzcG9uc2VzJztcblxuZGVzY3JpYmUoJ1Jlc3BvbnNlIFV0aWxpdGllcycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2NyZWF0ZUFwaVJlc3BvbnNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ2NyZWF0ZXMgcmVzcG9uc2Ugd2l0aCBjb3JyZWN0IHN0YXR1cyBjb2RlIGFuZCBib2R5JywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjcmVhdGVBcGlSZXNwb25zZSgyMDEsIHsgbWVzc2FnZTogJ0NyZWF0ZWQnIH0pO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoMjAxKTtcbiAgICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpKS50b0VxdWFsKHsgbWVzc2FnZTogJ0NyZWF0ZWQnIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ2NyZWF0ZXMgMjAwIHJlc3BvbnNlIHdpdGggY29ycmVjdCBib2R5JywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjcmVhdGVTdWNjZXNzUmVzcG9uc2UoeyBtZXNzYWdlOiAnU3VjY2VzcycsIGRhdGE6IFsxLCAyLCAzXSB9KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QoSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KSkudG9FcXVhbCh7IG1lc3NhZ2U6ICdTdWNjZXNzJywgZGF0YTogWzEsIDIsIDNdIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlQmFkUmVxdWVzdFJlc3BvbnNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ2NyZWF0ZXMgNDAwIHJlc3BvbnNlIHdpdGggY29ycmVjdCBtZXNzYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjcmVhdGVCYWRSZXF1ZXN0UmVzcG9uc2UoJ0JhZCByZXF1ZXN0Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9CZSg0MDApO1xuICAgICAgZXhwZWN0KEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSkpLnRvRXF1YWwoeyBtZXNzYWdlOiAnQmFkIHJlcXVlc3QnIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnaW5jbHVkZXMgYWRkaXRpb25hbCBkYXRhIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGNyZWF0ZUJhZFJlcXVlc3RSZXNwb25zZSgnQmFkIHJlcXVlc3QnLCB7IGRldGFpbHM6ICdNaXNzaW5nIGZpZWxkJyB9KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXNDb2RlKS50b0JlKDQwMCk7XG4gICAgICBleHBlY3QoSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KSkudG9FcXVhbCh7IFxuICAgICAgICBtZXNzYWdlOiAnQmFkIHJlcXVlc3QnLCBcbiAgICAgICAgZGV0YWlsczogJ01pc3NpbmcgZmllbGQnIFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjcmVhdGVFcnJvclJlc3BvbnNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ2NyZWF0ZXMgNTAwIHJlc3BvbnNlIHdpdGggZGVmYXVsdCBtZXNzYWdlIHdoZW4gbm9uZSBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gY3JlYXRlRXJyb3JSZXNwb25zZSgpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoNTAwKTtcbiAgICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpKS50b0VxdWFsKHsgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdjcmVhdGVzIDUwMCByZXNwb25zZSB3aXRoIGN1c3RvbSBtZXNzYWdlIHdoZW4gcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGNyZWF0ZUVycm9yUmVzcG9uc2UoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9CZSg1MDApO1xuICAgICAgZXhwZWN0KEpTT04ucGFyc2UocmVzcG9uc2UuYm9keSkpLnRvRXF1YWwoeyBtZXNzYWdlOiAnRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdfQ==